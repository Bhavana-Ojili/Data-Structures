class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class linkedli:
    def __init__(self):
        self.head=None
    def insertatbeg(self,data):
        new=node(data)
        if(self.head==None):
            self.head=new
            return
        else:
            new.next=self.head
            self.head=new
    def insertatend(self,data):
        new=node(data)
        if(self.head==None):
            self.head=new
            return
        else:
            cur=self.head
            while(cur.next!=None):
                cur=cur.next
            cur.next=new
    def insertatind(self,data,ind):
        new=node(data)
        cur=self.head
        while(cur!=None and ind-1!=0):
            cur=cur.next
            ind=ind-1
        if cur!=None:
            new.next=cur.next
            cur.next=new
    def update(self,val,ind):
        cur=self.head
        while(cur!=None and ind!=0):
            cur=cur.next
            ind=ind-1
        if cur!=None:
            cur.data=val
    def removeatbeg(self):
        if self.head!=None:
            self.head=self.head.next
    def removeatend(self):
        cur=self.head
        while(cur.next.next):
            cur=cur.next
        cur.next=None
    def removeatind(self,ind):
        cur=self.head
        while(cur!=None and ind!=0):
            cur=cur.next
            ind=ind-1
        cur.next=cur.next.next
    def remove(self,val):
        cur=self.head
        while(cur.next!=0):
            if cur.next.data==val:
                cur.next=cur.next.next
                break
            cur=cur.next
            
    def printli(self):
        cur=self.head
        while(cur!=None):
            print(cur.data,end=' ')
            cur=cur.next
li=linkedli()
li.insertatbeg(1)
li.insertatbeg(2)
li.insertatbeg(3)
li.insertatend(4)
li.insertatend(5)
li.insertatind(6,2)
li.update(7,3)
li.removeatbeg()
li.removeatend()
li.removeatind(2)
li.remove(6)
li.printli()
